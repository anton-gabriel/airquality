# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import sensors_pb2 as sensors__pb2


class SensorAirQualityServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SendAirFeature = channel.unary_unary(
        '/SensorAirQualityService/SendAirFeature',
        request_serializer=sensors__pb2.SensorAirQualityRequest.SerializeToString,
        response_deserializer=sensors__pb2.SensorAirQualityResponse.FromString,
        )
    self.SendAirFeatures = channel.stream_stream(
        '/SensorAirQualityService/SendAirFeatures',
        request_serializer=sensors__pb2.SensorAirQualityRequest.SerializeToString,
        response_deserializer=sensors__pb2.SensorAirQualityResponse.FromString,
        )


class SensorAirQualityServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def SendAirFeature(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SendAirFeatures(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SensorAirQualityServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SendAirFeature': grpc.unary_unary_rpc_method_handler(
          servicer.SendAirFeature,
          request_deserializer=sensors__pb2.SensorAirQualityRequest.FromString,
          response_serializer=sensors__pb2.SensorAirQualityResponse.SerializeToString,
      ),
      'SendAirFeatures': grpc.stream_stream_rpc_method_handler(
          servicer.SendAirFeatures,
          request_deserializer=sensors__pb2.SensorAirQualityRequest.FromString,
          response_serializer=sensors__pb2.SensorAirQualityResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'SensorAirQualityService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class SensorEnvironmentServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SendEnvironmentFeature = channel.unary_unary(
        '/SensorEnvironmentService/SendEnvironmentFeature',
        request_serializer=sensors__pb2.SensorEnvironmentRequest.SerializeToString,
        response_deserializer=sensors__pb2.SensorEnvironmentResponse.FromString,
        )
    self.SendEnvironmentFeatures = channel.stream_stream(
        '/SensorEnvironmentService/SendEnvironmentFeatures',
        request_serializer=sensors__pb2.SensorEnvironmentRequest.SerializeToString,
        response_deserializer=sensors__pb2.SensorEnvironmentResponse.FromString,
        )


class SensorEnvironmentServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def SendEnvironmentFeature(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SendEnvironmentFeatures(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SensorEnvironmentServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SendEnvironmentFeature': grpc.unary_unary_rpc_method_handler(
          servicer.SendEnvironmentFeature,
          request_deserializer=sensors__pb2.SensorEnvironmentRequest.FromString,
          response_serializer=sensors__pb2.SensorEnvironmentResponse.SerializeToString,
      ),
      'SendEnvironmentFeatures': grpc.stream_stream_rpc_method_handler(
          servicer.SendEnvironmentFeatures,
          request_deserializer=sensors__pb2.SensorEnvironmentRequest.FromString,
          response_serializer=sensors__pb2.SensorEnvironmentResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'SensorEnvironmentService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))

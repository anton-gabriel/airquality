// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sensors.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Generated {
  public static partial class SensorAirQualityService
  {
    static readonly string __ServiceName = "SensorAirQualityService";

    static readonly grpc::Marshaller<global::Generated.SensorAirQualityRequest> __Marshaller_SensorAirQualityRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Generated.SensorAirQualityRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Generated.SensorAirQualityResponse> __Marshaller_SensorAirQualityResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Generated.SensorAirQualityResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Generated.SensorAirQualityRequest, global::Generated.SensorAirQualityResponse> __Method_SendAirFeature = new grpc::Method<global::Generated.SensorAirQualityRequest, global::Generated.SensorAirQualityResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendAirFeature",
        __Marshaller_SensorAirQualityRequest,
        __Marshaller_SensorAirQualityResponse);

    static readonly grpc::Method<global::Generated.SensorAirQualityRequest, global::Generated.SensorAirQualityResponse> __Method_SendAirFeatures = new grpc::Method<global::Generated.SensorAirQualityRequest, global::Generated.SensorAirQualityResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "SendAirFeatures",
        __Marshaller_SensorAirQualityRequest,
        __Marshaller_SensorAirQualityResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Generated.SensorsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SensorAirQualityService</summary>
    [grpc::BindServiceMethod(typeof(SensorAirQualityService), "BindService")]
    public abstract partial class SensorAirQualityServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Generated.SensorAirQualityResponse> SendAirFeature(global::Generated.SensorAirQualityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SendAirFeatures(grpc::IAsyncStreamReader<global::Generated.SensorAirQualityRequest> requestStream, grpc::IServerStreamWriter<global::Generated.SensorAirQualityResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SensorAirQualityService</summary>
    public partial class SensorAirQualityServiceClient : grpc::ClientBase<SensorAirQualityServiceClient>
    {
      /// <summary>Creates a new client for SensorAirQualityService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SensorAirQualityServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SensorAirQualityService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SensorAirQualityServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SensorAirQualityServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SensorAirQualityServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Generated.SensorAirQualityResponse SendAirFeature(global::Generated.SensorAirQualityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendAirFeature(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Generated.SensorAirQualityResponse SendAirFeature(global::Generated.SensorAirQualityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendAirFeature, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Generated.SensorAirQualityResponse> SendAirFeatureAsync(global::Generated.SensorAirQualityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendAirFeatureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Generated.SensorAirQualityResponse> SendAirFeatureAsync(global::Generated.SensorAirQualityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendAirFeature, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Generated.SensorAirQualityRequest, global::Generated.SensorAirQualityResponse> SendAirFeatures(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendAirFeatures(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Generated.SensorAirQualityRequest, global::Generated.SensorAirQualityResponse> SendAirFeatures(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SendAirFeatures, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SensorAirQualityServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SensorAirQualityServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SensorAirQualityServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SendAirFeature, serviceImpl.SendAirFeature)
          .AddMethod(__Method_SendAirFeatures, serviceImpl.SendAirFeatures).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SensorAirQualityServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SendAirFeature, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Generated.SensorAirQualityRequest, global::Generated.SensorAirQualityResponse>(serviceImpl.SendAirFeature));
      serviceBinder.AddMethod(__Method_SendAirFeatures, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Generated.SensorAirQualityRequest, global::Generated.SensorAirQualityResponse>(serviceImpl.SendAirFeatures));
    }

  }
  public static partial class SensorEnvironmentService
  {
    static readonly string __ServiceName = "SensorEnvironmentService";

    static readonly grpc::Marshaller<global::Generated.SensorEnvironmentRequest> __Marshaller_SensorEnvironmentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Generated.SensorEnvironmentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Generated.SensorEnvironmentResponse> __Marshaller_SensorEnvironmentResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Generated.SensorEnvironmentResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Generated.SensorEnvironmentRequest, global::Generated.SensorEnvironmentResponse> __Method_SendEnvironmentFeature = new grpc::Method<global::Generated.SensorEnvironmentRequest, global::Generated.SensorEnvironmentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendEnvironmentFeature",
        __Marshaller_SensorEnvironmentRequest,
        __Marshaller_SensorEnvironmentResponse);

    static readonly grpc::Method<global::Generated.SensorEnvironmentRequest, global::Generated.SensorEnvironmentResponse> __Method_SendEnvironmentFeatures = new grpc::Method<global::Generated.SensorEnvironmentRequest, global::Generated.SensorEnvironmentResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "SendEnvironmentFeatures",
        __Marshaller_SensorEnvironmentRequest,
        __Marshaller_SensorEnvironmentResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Generated.SensorsReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of SensorEnvironmentService</summary>
    [grpc::BindServiceMethod(typeof(SensorEnvironmentService), "BindService")]
    public abstract partial class SensorEnvironmentServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Generated.SensorEnvironmentResponse> SendEnvironmentFeature(global::Generated.SensorEnvironmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SendEnvironmentFeatures(grpc::IAsyncStreamReader<global::Generated.SensorEnvironmentRequest> requestStream, grpc::IServerStreamWriter<global::Generated.SensorEnvironmentResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SensorEnvironmentService</summary>
    public partial class SensorEnvironmentServiceClient : grpc::ClientBase<SensorEnvironmentServiceClient>
    {
      /// <summary>Creates a new client for SensorEnvironmentService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SensorEnvironmentServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SensorEnvironmentService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SensorEnvironmentServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SensorEnvironmentServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SensorEnvironmentServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Generated.SensorEnvironmentResponse SendEnvironmentFeature(global::Generated.SensorEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendEnvironmentFeature(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Generated.SensorEnvironmentResponse SendEnvironmentFeature(global::Generated.SensorEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendEnvironmentFeature, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Generated.SensorEnvironmentResponse> SendEnvironmentFeatureAsync(global::Generated.SensorEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendEnvironmentFeatureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Generated.SensorEnvironmentResponse> SendEnvironmentFeatureAsync(global::Generated.SensorEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendEnvironmentFeature, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Generated.SensorEnvironmentRequest, global::Generated.SensorEnvironmentResponse> SendEnvironmentFeatures(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendEnvironmentFeatures(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Generated.SensorEnvironmentRequest, global::Generated.SensorEnvironmentResponse> SendEnvironmentFeatures(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SendEnvironmentFeatures, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SensorEnvironmentServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SensorEnvironmentServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SensorEnvironmentServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SendEnvironmentFeature, serviceImpl.SendEnvironmentFeature)
          .AddMethod(__Method_SendEnvironmentFeatures, serviceImpl.SendEnvironmentFeatures).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SensorEnvironmentServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SendEnvironmentFeature, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Generated.SensorEnvironmentRequest, global::Generated.SensorEnvironmentResponse>(serviceImpl.SendEnvironmentFeature));
      serviceBinder.AddMethod(__Method_SendEnvironmentFeatures, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Generated.SensorEnvironmentRequest, global::Generated.SensorEnvironmentResponse>(serviceImpl.SendEnvironmentFeatures));
    }

  }
}
#endregion
